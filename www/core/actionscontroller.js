/**
 * @license Copyright 2013 - 2014 Intel Corporation All Rights Reserved.
 *
 * The source code, information and material ("Material") contained herein is owned by Intel Corporation or its
 * suppliers or licensors, and title to such Material remains with Intel Corporation or its suppliers or
 * licensors. The Material contains proprietary information of Intel or its suppliers and licensors. The
 * Material is protected by worldwide copyright laws and treaty provisions. No part of the Material may be used,
 * copied, reproduced, modified, published, uploaded, posted, transmitted, distributed or disclosed in any way
 * without Intel's prior express written permission. No license under any patent, copyright or other intellectual
 * property rights in the Material is granted to or conferred upon you, either expressly, by implication,
 * inducement, estoppel or otherwise. Any license under such intellectual property rights must be express and
 * approved by Intel in writing.
 *
 * Unless otherwise agreed by Intel in writing, you may not remove or alter this notice or any other notice
 * embedded in Materials by Intel or Intel's suppliers or licensors in any way.
 */
goog.provide("idr.core.ActionsController"),goog.require("idr.debug"),goog.require("idr.core.Component"),goog.require("idr.core.Action"),idr.core.ActionsController=function(){this._actions={},this._history=[]},idr.core.ActionsController.prototype.registerAction=function(component,action){idr.debug.assertRequireParameter(component,"component"),idr.debug.assertRequireParameter(action,"action"),void 0!==this._actions[action.Key]&&idr.debug.log("Warning! duplicated action key '"+action.Key+"'"),this._actions[action.Key]={component:component,actionData:action,actualShortcut:action.DefaultShortcut}},idr.core.ActionsController.prototype.pushIntoHistory=function(component,interactionData){idr.debug.assertRequireParameter(component,"component"),(void 0===interactionData||null===interactionData)&&(interactionData={}),this._history.push({component:component,data:JSON.stringify(interactionData)})},idr.core.ActionsController.prototype.sendInteractionDataToComponent=function(component,jsonData,undo){var data;try{data=JSON.parse(jsonData),undo?component.undoHistoryRequested(data):component.redoHistoryRequested(data)}catch(e){idr.debug.log("Error sending undo/redo action to component.")}return data},idr.core.ActionsController.prototype.undoFromHistory=function(){var action=this._history.pop();if(void 0===action)return void 0;var data=this.sendInteractionDataToComponent(action.component,action.data,!0);return data},idr.core.ActionsController.prototype.redoFromHistory=function(){if(0===this._history.length)return void 0;var action=this._history[this._history.length-1],data=this.sendInteractionDataToComponent(action.component,action.data,!1);return data},idr.core.ActionsController.prototype.dispatchKeyboardEvent=function(event){if("keyup"===event.type)for(var charCode=event.keyCode,shift=event.shiftKey,ctrl=event.ctrlKey,alt=event.altKey,keys=Object.keys(this._actions),keysLength=keys.length,i=0;keysLength>i;i++){var action=this._actions[keys[i]];this.isActionShortcutMatched(action.actualShortcut,charCode,shift,ctrl,alt)&&action.component.receiveAction(action.actionData.Key,event)}},idr.core.ActionsController.prototype.isActionShortcutMatched=function(actionShortcut,charCode,shiftKey,ctrlKey,altKey){var shortcutString=ctrlKey?"Ctrl-":"";return shortcutString+=altKey?"Alt-":"",shortcutString+=shiftKey?"Shift-":"",shortcutString+=27===charCode?"Esc":46===charCode?"Delete":String.fromCharCode(charCode),actionShortcut===shortcutString};